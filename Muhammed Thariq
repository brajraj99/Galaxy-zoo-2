import tensorflow as tf
import pathlib
import numpy as np
import os
import matplotlib.pyplot as plt
from google.colab import drive
from tensorflow.keras import layers, models, optimizers, losses, callbacks,\
                             regularizers
drive.mount('/content/drive')

!unzip -q '/content/drive/MyDrive/mlnn_assignment/Group_Project_Data 2.zip'

def normalisation(image):
  image = tf.image.resize(image, [32,32])
  return image
  
def reinitialize(model):
    # Loop over the layers of the model
    for l in model.layers:
        # Check if the layer has initializers
        if hasattr(l,"kernel_initializer"):
            # Reset the kernel weights
            l.kernel.assign(l.kernel_initializer(tf.shape(l.kernel)))
        if hasattr(l,"bias_initializer"):
            # Reset the bias
            l.bias.assign(l.bias_initializer(tf.shape(l.bias)))  
  
  
train = tf.keras.utils.image_dataset_from_directory('/content/Group_Project_Data/Train/', color_mode='grayscale')
valid = tf.keras.utils.image_dataset_from_directory('/content/Group_Project_Data/Valid/',color_mode='grayscale')
class_names = train.class_names
print(class_names)

plt.figure(figsize=(10, 10))
for images, labels in train.take(1):
  for i in range(9):
    ax = plt.subplot(3, 3, i + 1)
    plt.imshow(images[i].numpy().astype("uint8"))
    plt.title(class_names[labels[i]])
    plt.axis("off")
    
    
train = train.map(lambda x, y: (normalisation(x), y))
valid = valid.map(lambda x, y: (normalisation(x), y))
for image, label in train.take(1):
  print(image.shape)
  print(label.shape)    
    
inp = layers.Input((32, 32, 1), dtype='float32', name='Input')
conv_1 = layers.Conv2D(16, kernel_size=(3, 3), strides=(1, 1), padding='same', 
                       activation='relu', name='conv_1')(inp)
conv_2 = layers.Conv2D(16, kernel_size=(3, 3), strides=(1, 1), padding='same', 
                       activation='relu', name='conv_2')(conv_1)
pool_1 = layers.MaxPool2D(pool_size=(2, 2), name='pool_1')(conv_2)
conv_3 = layers.Conv2D(32, kernel_size=(3, 3), strides=(1, 1), padding='same', 
                       activation='relu', name='conv_3')(pool_1)
conv_4 = layers.Conv2D(32, kernel_size=(3, 3), strides=(1, 1), padding='same', 
                       activation='relu', name='conv_4')(conv_3)                       
pool_2 = layers.MaxPool2D(pool_size=(2, 2), name='pool_2')(conv_4) 
flat = layers.Flatten(name='flat')(pool_2)
fc_1 = layers.Dense(512, activation='relu', name='fc_1')(flat)
out = layers.Dense(1, activation='sigmoid', name='Output')(fc_1)
galaxy_model = models.Model(inputs=inp, outputs=out)
galaxy_model.summary()
